#!/bin/bash
# postinst script for pi-control-panel
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#
# quoting from the policy:
#     Any necessary prompting should almost always be confined to the
#     post-installation script, and should be protected with a conditional
#     so that unnecessary prompting doesn't happen if a package's
#     installation fails and the `postinst' is called with `abort-upgrade',
#     `abort-remove' or `abort-deconfigure'.

case "$1" in
    configure)

        # Enabling supported workers
        cat /proc/cpuinfo &> /dev/null
        if [ $? -ne 0 ]; then
        	echo -e '\nChipsetWorker \033[0;31mdisabled\033[0m'
        	sed --in-place '/    "Chipset": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        fi
        
        top -bc -n 1 &> /dev/null && vcgencmd measure_temp &> /dev/null && cat /proc/cpuinfo &> /dev/null && cat /boot/config.txt &> /dev/null
        if [ $? -eq 0 ]; then
        	cat /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state &> /dev/null
        	if [ $? -ne 0 ]; then
        		echo -e 'CpuFrequencyWorker \033[0;31mdisabled\033[0m'
        		sed --in-place '/    "CpuFrequency": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        	fi
        else
        	echo -e 'CpuWorker \033[0;31mdisabled\033[0m'
        	sed --in-place '/    "Cpu": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        	echo -e 'CpuFrequencyWorker \033[0;31mdisabled\033[0m'
        	sed --in-place '/    "CpuFrequency": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        fi
        
        vcgencmd get_mem gpu &> /dev/null && cat /boot/config.txt &> /dev/null
        if [ $? -ne 0 ]; then
        	echo -e 'GpuWorker \033[0;31mdisabled\033[0m'
        	sed --in-place '/    "Gpu": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        fi
        
        hostnamectl &> /dev/null && uptime -p &> /dev/null
        if [ $? -ne 0 ]; then
        	echo -e 'OsWorker \033[0;31mdisabled\033[0m'
        	sed --in-place '/    "Os": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        fi
        
        ifconfig &> /dev/null
        if [ $? -eq 0 ]; then
        	cat /proc/net/dev &> /dev/null
        	if [ $? -ne 0 ]; then
        		echo -e 'NetworkInterfaceStatusWorker \033[0;31mdisabled\033[0m'
        		sed --in-place '/    "NetworkInterfaceStatus": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        	fi
        else
        	echo -e 'NetworkWorker \033[0;31mdisabled\033[0m'
        	sed --in-place '/    "Network": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        	echo -e 'NetworkInterfaceStatusWorker \033[0;31mdisabled\033[0m'
        	sed --in-place '/    "NetworkInterfaceStatus": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        fi
        
        df -T &> /dev/null
        if [ $? -ne 0 ]; then
        	echo -e 'DiskWorker \033[0;31mdisabled\033[0m'
        	sed --in-place '/    "Disk": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        fi
        
        free --mega &> /dev/null
        if [ $? -ne 0 ]; then
        	echo -e 'RandomAccessMemoryWorker \033[0;31mdisabled\033[0m'
        	echo -e 'SwapMemoryWorker \033[0;31mdisabled\033[0m'
        	sed --in-place '/    "RandomAccessMemory": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        	sed --in-place '/    "SwapMemory": {/!b;n;c      "Enabled": false,' /opt/picontrolpanel/Configuration/appsettings.json
        fi
        # End of Enabling supported workers
        
        # Configuring port
        echo -e 'Configuring port for the application...'
        port=8079
		socketStats=$(ss -tunlp)
        while [ $port -lt 10000 ]; do
            port=$(($port + 1))
            if [ -z "`grep ":$port " <<< "$socketStats"`" ]; then
                break
            fi
        done
        
        if [ $port -ge 10000 ]; then
            echo -e '\033[0;31mCould not find an available port to run the application\033[0m\n'
            exit 1
        elif [ $port -ne 8080 ]; then
            sed --in-place '/    "Http": {/!b;n;c        "Url": "http://+:'"$port"'"' /opt/picontrolpanel/Configuration/appsettings.json
        fi
        # End of Configuring port
        
        systemctl enable picontrolpanel
        systemctl start picontrolpanel
        
        echo -e '\n\033[0;32mThe installation of PiControlPanel is complete!\033[0m'
        
        raspberryPiIp=$(hostname -I | cut -d' ' -f1)
		echo -e 'Login @ \033[0;36mhttp://localhost:'"$port"'\033[0m from Raspberry Pi or \033[0;36mhttp://'"$raspberryPiIp"':'"$port"'\033[0m from another machine\n'
		
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 0
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
